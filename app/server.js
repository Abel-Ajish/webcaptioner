const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const microcache = require('route-cache')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')
const enforce = require('express-sslify');
const uuid = require('uuid/v4');
const uws = require('uws');

const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()
let server = require('http').Server(app);
let io = require('socket.io')(server, { wsEngine: 'uws' });

// Health check
app.use('/health-check', function (req, res) {
  res.sendStatus(200);
});

if (isProd) {
  // app.use(enforce.HTTPS({ trustProtoHeader: true }));
}

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use(favicon('./public/favicon.ico'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

// Static site pages
// app.use('/blog', express.static(path.join(__dirname, '../static-site/public/blog')));
// app.use('/help', express.static(path.join(__dirname, '../static-site/public/help')));
// app.use('/donate', express.static(path.join(__dirname, '../static-site/public/donate')));
// app.use('/privacy-policy', express.static(path.join(__dirname, '../static-site/public/privacy-policy')));
// app.use('/community', express.static(path.join(__dirname, '../static-site/public/community')));
// app.use('/feedback', express.static(path.join(__dirname, '../static-site/public/feedback')));
// app.use('/vmix', express.static(path.join(__dirname, '../static-site/public/vmix')));
// app.use('/static/img', express.static(path.join(__dirname, 'static/img')));

// app.use('/captioner', captioner);
// app.use('/translate', translate);
// app.use('/feedback', feedback);


// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl));

function render (req, res) {
  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: 'Web Captioner', // default title
    url: req.url
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

// Serve app
app.get([
  '/captioner*',
  '/receivers*',
  '/connect*',
], isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
});

// Serve static pages
app.use(express.static(path.join(__dirname, '../static-site/public')));

const port = process.env.PORT || 8080
server.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})

let roomLeaderTokens = [];

io.on('connection', function (socket) {
  function generateConnectId() {
    return Math.floor(100000 + Math.random() * 900000); // Random 6-digit number
  }

  function sendRoomMemberListToLeader(roomId) {
    let roomleaderSocketId = Object.keys(io.sockets.connected).find(function (socketId) {
      let socket = io.sockets.connected[socketId];
      return socket._wc && socket._wc.roomId && socket._wc.roomId === roomId;
    });

    if (roomleaderSocketId) {

      // Get members
      io.in(roomId).clients((error, clients) => {
        let remoteDisplays = clients.map((clientId) => {
          let client = io.sockets.connected[clientId];
          if (client) {
            return {
              remoteDisplayId: client.id,
              device: client._wc ? client._wc.device : null,
              joinDate: client._wc ? client._wc.joinDate : null,
            };
          }
        });

        io.to(roomleaderSocketId)
          .emit('remoteDisplays', {remoteDisplays});
      });
    }
    else {
      console.log('couldnt find');
    }
  }

  socket._wc = {};

  socket.on('getMyConnectId', ({device}, fn) => {
    socket._wc.connectId = generateConnectId();
    socket._wc.device = device;
    fn({connectId: socket._wc.connectId});
  });

  socket.on('getMyRoomLeaderToken', (name, fn) => {
    let roomId = uuid(),
        roomLeaderToken = uuid();
    
    socket._wc.roomId = roomId;
    socket._wc.roomLeaderToken = roomLeaderToken;

    roomLeaderTokens.push({
      roomLeaderToken,
      roomId,
    });

    fn({roomLeaderToken});
  });

  socket.on('restoreMyRoomIdFromRoomLeaderToken', ({ roomLeaderToken }, fn) => {
    let room = roomLeaderTokens.find((r) => {
      return r.roomLeaderToken === roomLeaderToken;
    });

    if (room) {
      console.log('restoring room '+room.roomId + ' to socket '+socket.id);

      socket._wc.roomId = room.roomId;
      socket._wc.roomLeaderToken = room.roomLeaderToken;
      fn({success: true});

      sendRoomMemberListToLeader(socket._wc.roomId);
    }
    else {
      fn({success: false});
    }
  });

  socket.on('sendMessageToRoom', ({type, payload}, fn) => {
    let thisClientId;
    io.in(socket._wc.roomId).clients((error, clients) => {
      let remoteDisplays = clients.map((clientId) => {
        thisClientId = clientId;
      });
    });

    console.log('send message to ' + socket._wc.roomId + ' ' + Date.now());
    io.to(socket._wc.roomId).emit('processMessage', {type, payload});
  });

  socket.on('addConnectIdToMyRoom', ({connectId}, ack) => {
    const joineeSocketId = Object.keys(io.sockets.connected).find((socketId) => {
      const thisSocketConnectId = io.sockets.connected[socketId]._wc.connectId;
      return thisSocketConnectId && thisSocketConnectId == connectId;
    });

    if (joineeSocketId && io.sockets.connected[joineeSocketId]) {
      let joineeSocket = io.sockets.connected[joineeSocketId];
      joineeSocket.join(socket._wc.roomId, () => {
        io.to(joineeSocket.id)
          .emit('joinedRoom', 'Message to you about joining ' +socket._wc.roomId);
      });

      joineeSocket._wc.joinDate = Date.now();
      sendRoomMemberListToLeader(socket._wc.roomId);
      ack({
        success: true,
      });
    }
    else {
      // Nobody with this connect ID was found
      ack({
        success: false,
      });
    }
  });
});

