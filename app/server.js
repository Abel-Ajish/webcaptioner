const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const microcache = require('route-cache')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')
const enforce = require('express-sslify');
const uuid = require('uuid/v4');
const WebSocket = require('ws');

const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()
const server = require('http').Server(app);
const wss = new WebSocket.Server({ server });

// Health check
app.use('/health-check', function (req, res) {
  res.sendStatus(200);
});

if (isProd) {
  app.use(enforce.HTTPS({ trustProtoHeader: true }));
}

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use(favicon('./public/favicon.ico'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

// Static site pages
// app.use('/blog', express.static(path.join(__dirname, '../static-site/public/blog')));
// app.use('/help', express.static(path.join(__dirname, '../static-site/public/help')));
// app.use('/donate', express.static(path.join(__dirname, '../static-site/public/donate')));
// app.use('/privacy-policy', express.static(path.join(__dirname, '../static-site/public/privacy-policy')));
// app.use('/community', express.static(path.join(__dirname, '../static-site/public/community')));
// app.use('/feedback', express.static(path.join(__dirname, '../static-site/public/feedback')));
// app.use('/vmix', express.static(path.join(__dirname, '../static-site/public/vmix')));
// app.use('/static/img', express.static(path.join(__dirname, 'static/img')));

// app.use('/captioner', captioner);
// app.use('/translate', translate);
// app.use('/feedback', feedback);


// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl));

function render (req, res) {
  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: 'Web Captioner', // default title
    url: req.url
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

// Serve app
app.get([
  '/captioner*',
  '/receivers*',
  '/connect*',
], isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
});

// Serve static pages
app.use(express.static(path.join(__dirname, '../static-site/public')));

const port = process.env.PORT || 8080
server.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})

let roomLeaderTokens = [];

wss.on('connection', function (socket) {
  socket.id = uuid();
  socket._webcaptioner = {};

  socket.on('message', (messageJson) => {
    let message;

    try {
      message = JSON.parse(messageJson)
    }
    catch (e) {
      console.log('trouble parsing json');
      return;
    }

    switch (message.action) {
      case 'getMyConnectId':
        return getMyConnectId(socket, message.deviceInfo);
      case 'getMyRoomLeaderToken':
        return getMyRoomLeaderToken(socket);
      case 'addMemberToMyRoom':
        return addMemberToMyRoom(socket, parseInt(message.connectId));
      case 'restoreMyRoomIdFromRoomLeaderToken':
        return restoreMyRoomIdFromRoomLeaderToken(socket, message.roomLeaderToken);
      case 'sendMessageToRoom':
        return sendMessageToRoom(socket, message.type, message.payload);
      default:
        console.log('unhandled socket action');
        console.log(messageJson);
    }
  });

  socket.on('error', function(e) {
    console.log('Socket closed');
  });
});


function generateConnectId() {
  return Math.floor(100000 + Math.random() * 900000); // Random 6-digit number
}

function generateRoomId() {
  return uuid();
}

function generateRoomLeaderToken() {
  return uuid();
}

function getMyConnectId(socket, deviceInfo) {
  socket._webcaptioner.connectId = generateConnectId();
  socket._webcaptioner.deviceInfo = deviceInfo;

  socket.send(JSON.stringify({
    mutation: 'SET_CONNECT_ID',
    connectId: socket._webcaptioner.connectId,
  }));
}

function getMyRoomLeaderToken(socket) {
  socket._webcaptioner.roomLeaderToken = generateRoomLeaderToken();
  socket._webcaptioner.roomId = generateRoomId();

    roomLeaderTokens.push({
      roomLeaderToken: socket._webcaptioner.roomLeaderToken,
      roomId: socket._webcaptioner.roomId,
    });

  socket.send(JSON.stringify({
    mutation: 'SET_ROOM_LEADER_TOKEN',
    roomLeaderToken: socket._webcaptioner.roomLeaderToken,
  }));
}

function restoreMyRoomIdFromRoomLeaderToken(leaderSocket, roomLeaderToken) {
  console.log("room leader tokens: ");
  console.log(roomLeaderTokens);
    let room = roomLeaderTokens.find((r) => {
      return r.roomLeaderToken === roomLeaderToken;
    });

    if (room) {
      console.log('restoring room '+room.roomId + ' to socket.');

      leaderSocket._webcaptioner.roomLeaderToken = room.roomLeaderToken;
      leaderSocket._webcaptioner.roomId = room.roomId;

      sendRoomMemberListToLeader(leaderSocket);
    }
    else {
      // No preexisting room found for that token. Assign a new room/token.
      getMyRoomLeaderToken(leaderSocket);
    }
}

function addMemberToMyRoom(leaderSocket, memberConnectId) {
  // (wss.clients is a set, not an array)
  const memberSocket = Array.from(wss.clients).find((client) => {
    return client._webcaptioner.connectId && client._webcaptioner.connectId === memberConnectId;
  });

  const leaderRoomId = leaderSocket._webcaptioner.roomId;

  if (memberSocket && leaderRoomId) {
    memberSocket._webcaptioner.memberOfRoomId = leaderRoomId;
    memberSocket._webcaptioner.joinDate = Date.now();
    memberSocket._webcaptioner.connectId = null; // we don't need it anyomre

    memberSocket.send(JSON.stringify({
      mutation: 'SET_MEMBER_OF_ROOM_ID',
      memberOfRoomId: memberSocket._webcaptioner.memberOfRoomId,
    }));

    leaderSocket.send(JSON.stringify({
      mutation: 'SET_REMOTE_DISPLAY_CONNECTED_ID_FOUND_MESSAGE',
      on: true,
    }));

    sendRoomMemberListToLeader(leaderSocket);
  }
  else {
    // Nobody with this connect ID was found
    leaderSocket.send(JSON.stringify({
      mutation: 'SET_REMOTE_DISPLAY_CONNECTED_ID_NOT_FOUND_ERROR',
      on: true,
    }));
  }
}

function getRoomMembersExcludingLeader(roomId) {
  let members = [];
  wss.clients.forEach(function(client) {
    if (roomId 
        && client._webcaptioner.memberOfRoomId == roomId
        && client.readyState === WebSocket.OPEN
    ) {
      members.push(client);
    }
  });
  return members;
}

function sendRoomMemberListToLeader(leaderSocket) {
  let leaderRoomId = leaderSocket._webcaptioner.roomId;
  let members = getRoomMembersExcludingLeader(leaderRoomId);

  if (leaderRoomId) {
    leaderSocket.send(JSON.stringify({
      mutation: 'SET_REMOTE_DISPLAYS',
      remoteDisplays: members.map(function(member) {
        return {
          device: member._webcaptioner.deviceInfo,
          joinDate: member._webcaptioner.joinDate,
        };
      }),
    }));
  }
  else {
    // This leader does not have a room
    getMyRoomLeaderToken(leaderSocket);
  }
}

function sendMessageToRoom(leaderSocket, mutation, payload) {
  getRoomMembersExcludingLeader(leaderSocket._webcaptioner.roomId)
    .forEach((roomMember) => {
      roomMember.send(JSON.stringify({
        mutation,
        ...payload,
      }));
    });
}